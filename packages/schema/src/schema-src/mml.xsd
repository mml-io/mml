<?xml version='1.0'?>
<?xml-stylesheet href="xsd.xsl" type="text/xsl"?>
<xs:schema elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>
      Intro

      This is a work-in-progress schema definition for MML v0.1.

      Its primary purpose is to define the valid tags and attributes for reference.

      Its secondary purpose is to serve as documentation for those creating content using the MML format.
    </xs:documentation>
  </xs:annotation>

  <xs:annotation>
    <xs:documentation>
      Value Types
    </xs:documentation>
  </xs:annotation>

  <xs:simpleType name="ContentType">
    <xs:annotation>
      <xs:documentation>
        media type, as per [RFC2045]
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:simpleType name="StringOrFloat">
    <xs:union memberTypes="xs:string xs:float" />
  </xs:simpleType>

  <xs:simpleType name="URI">
    <xs:annotation>
      <xs:documentation>
        a Uniform Resource Identifier, see [RFC2396]
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:anyURI"/>
  </xs:simpleType>

  <xs:simpleType name="Script">
    <xs:annotation>
      <xs:documentation>
        This is a string that is evaluated as a script expression.
      </xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>

  <xs:annotation>
    <xs:documentation>
      Attribute Sets
    </xs:documentation>
  </xs:annotation>

  <xs:attributeGroup name="coreattrs">
    <xs:annotation>
      <xs:documentation>
        Attributes common to all elements.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="id" type="xs:ID">
      <xs:annotation>
        <xs:documentation>
          A unique identifier for the element, used for selection and manipulation through scripting. It must be unique within the document.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="class" type="xs:NMTOKENS">
      <xs:annotation>
        <xs:documentation>
          A space-separated list of class names that can be used for scripting purposes.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="clickable">
    <xs:annotation>
      <xs:documentation>
        This attribute group indicates that this element is clickable. The onclick attribute is a script expression that is executed when the element is clicked. Events are also dispatched to "click" listeners.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="onclick" type="Script">
      <xs:annotation>
        <xs:appinfo>click|MMLClickEvent</xs:appinfo>
        <xs:documentation>
          A script expression that is executed when the element is clicked. Events are also dispatched to "click" event listeners.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="transformable">
    <xs:annotation>
      <xs:documentation>
        Attributes for positioning, rotating and scaling in 3D.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="x" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The position of the element along the X-axis in meters. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="y" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The position of the element along the Y-axis in meters. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="z" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The position of the element along the Z-axis in meters. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rx" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The rotation of the element around the X-axis in degrees. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="ry" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The rotation of the element around the Y-axis in degrees. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="rz" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The rotation of the element around the Z-axis in degrees. Default value is 0.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sx" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The scale of the element along the X-axis. Default value is 1.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sy" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The scale of the element along the Y-axis. Default value is 1.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="sz" type="xs:float">
      <xs:annotation>
        <xs:documentation>
          The scale of the element along the Z-axis. Default value is 1.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="visible" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether the element is visible (true) or hidden (false) in the scene. Default value is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="socket" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The name of a bone in the parent element's skeletal mesh to which this element will be attached. If not specified, the element will attach to the origin of its parent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="shadows">
    <xs:annotation>
      <xs:documentation>
        Attributes for cast and receiving shadows
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="cast-shadows" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether the element casts shadows onto other elements (true) or not (false). Default value is true.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="debuggable">
    <xs:annotation>
      <xs:documentation>
        The debug attribute is a boolean that indicates whether the element should be drawn with debug information.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="debug" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          A boolean that indicates whether the element should be drawn with debug information (e.g. axes helper). Default value is false.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="collideable">
    <xs:annotation>
      <xs:documentation>
        The collide attribute is a boolean that indicates whether a collision test should be performed on this element.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="collide" type="xs:boolean">
      <xs:annotation>
        <xs:documentation>
          Whether or not this object should participate in collision detection by other systems. Default value is true. If set to true, the object will be considered for collision tests.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="collision-interval" type="xs:integer">
      <xs:annotation>
        <xs:documentation>
          If set, the time in milliseconds between user collision events being sent to the element. By default collision events are not sent.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="oncollisionstart" type="Script">
      <xs:annotation>
        <xs:appinfo>collisionstart|MMLCollisionStartEvent</xs:appinfo>
        <xs:documentation>
          A script expression to be executed when a user starts colliding with the element. Receives a `CollisionStartEvent`.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="oncollisionmove" type="Script">
      <xs:annotation>
        <xs:appinfo>collisionmove|MMLCollisionMoveEvent</xs:appinfo>
        <xs:documentation>
          A script expression to be executed when a user moves the collision point they are colliding at on the element. Receives a `CollisionMoveEvent`.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
    <xs:attribute name="oncollisionend" type="Script">
      <xs:annotation>
        <xs:appinfo>collisionend|MMLCollisionEndEvent</xs:appinfo>
        <xs:documentation>
          A script expression to be executed when a user stops colliding with the element. Receives a `CollisionEndEvent`.
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:attributeGroup name="colorable">
    <xs:annotation>
      <xs:documentation>
        The color attribute is a string that indicates the color of the element.
      </xs:documentation>
    </xs:annotation>
    <xs:attribute name="color" type="xs:string">
      <xs:annotation>
        <xs:documentation>
          The color of the element. Accepts color values in formats such as "#FF0000", "red", or "rgb(255,0,0)". If not specified, the default color is "white".
        </xs:documentation>
      </xs:annotation>
    </xs:attribute>
  </xs:attributeGroup>

  <xs:annotation>
    <xs:documentation>
      Document Structure
    </xs:documentation>
  </xs:annotation>

  <xs:element name="html">
    <xs:complexType>
      <xs:sequence>
        <xs:element ref="head"/>
        <xs:element ref="body"/>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="head">
    <xs:annotation>
      <xs:documentation>
        The `head` element is used to define the document's metadata and can contain `script` elements.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:sequence>
        <xs:choice minOccurs="0" maxOccurs="unbounded">
          <xs:element ref="script"/>
        </xs:choice>
      </xs:sequence>
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="profile" type="URI"/>
    </xs:complexType>
  </xs:element>

  <xs:element name="script">
    <xs:annotation>
      <xs:documentation>
        The `script` element is used to define script expressions that are executed when the document is loaded.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:attribute name="id" type="xs:ID"/>
      <xs:attribute name="type" type="ContentType"/>
      <xs:attribute name="src" type="URI"/>
      <xs:attribute name="defer">
        <xs:simpleType>
          <xs:restriction base="xs:token">
            <xs:enumeration value="defer"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:attribute>
    </xs:complexType>
  </xs:element>

  <xs:element name="body">
    <xs:annotation>
      <xs:documentation>
        The `body` element is used to define the document's content.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType>
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attribute name="onload" type="Script"/>
          <xs:attribute name="onunload" type="Script"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:complexType name="MMLContent" mixed="true">
    <xs:annotation>
      <xs:documentation>
        `MMLContent` defines the set of MML tags.
      </xs:documentation>
    </xs:annotation>
    <xs:choice minOccurs="0" maxOccurs="unbounded">
      <xs:element ref="m-cube"/>
      <xs:element ref="m-sphere"/>
      <xs:element ref="m-label"/>
      <xs:element ref="m-light"/>
      <xs:element ref="m-plane"/>
      <xs:element ref="m-model"/>
      <xs:element ref="m-character"/>
      <xs:element ref="m-audio"/>
      <xs:element ref="m-image"/>
      <xs:element ref="m-video"/>
      <xs:element ref="m-prompt"/>
      <xs:element ref="m-link"/>
      <xs:element ref="m-position-probe"/>
      <xs:element ref="m-chat-probe"/>
      <xs:element ref="m-interaction"/>
      <xs:element ref="m-attr-anim"/>
      <xs:element ref="m-attr-lerp"/>
      <xs:element ref="m-frame"/>
      <xs:element ref="m-cylinder"/>
      <xs:element ref="m-group"/>
      <xs:element ref="script"/>
    </xs:choice>
  </xs:complexType>

  <xs:annotation >
    <xs:documentation>
      MML Elements
    </xs:documentation>
  </xs:annotation>

  <xs:element name="m-group">
    <xs:annotation>
      <xs:documentation>
        The `m-group` element can contain other MML tags, allowing all of them to be transformed as single item.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-cube">
    <xs:annotation>
      <xs:documentation>
        The `m-cube` element is a primitive 3D cube that can be coloured. It is often used for debugging or initial development purposes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="width" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The width of the cube in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the cube in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="depth" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The depth of the cube in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="opacity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The opacity of the cube, ranging from 0 (completely transparent) to 1 (completely opaque). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-sphere">
    <xs:annotation>
      <xs:documentation>
        The `m-sphere` element is a primitive 3D sphere that can be coloured. It is often used for debugging or initial development purposes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="radius" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The radius of the sphere in meters. Default value is 0.5 meters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="opacity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The opacity of the sphere, ranging from 0 (completely transparent) to 1 (completely opaque). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-cylinder">
    <xs:annotation>
      <xs:documentation>
        The `m-cylinder` element is a primitive 3D cylinder that can be coloured. It is often used for debugging or initial development purposes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="radius" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The radius of the cylinder in meters. Default value is 0.5 meters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the cylinder in meters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="opacity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The opacity of the cylinder, ranging from 0 (completely transparent) to 1 (completely opaque). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-light">
    <xs:annotation>
      <xs:documentation>
        The `m-light` element is a light that supports various types (e.g. `point`, `spotlight`) and can be coloured.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attribute name="intensity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The intensity of the light in candela (cd). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="distance" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The maximum distance in meters that the light will affect objects. Objects beyond this distance will not be illuminated. Default value is 0, which means the light has no maximum distance.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="angle" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The angle of the light in degrees (only applicable to spotlight type). Default value is 45.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the light is enabled (true) or disabled (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cast-shadow" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the light cast shadows (true) or not (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="type">
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="point"/>
                <xs:enumeration value="spotlight"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-plane">
    <xs:annotation>
      <xs:documentation>
        The `m-plane` element is a primitive 3D plane that can be coloured.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="width" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The width of the plane in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the plane in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="opacity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The opacity of the plane, ranging from 0 (completely transparent) to 1 (completely opaque). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-model">
    <xs:annotation>
      <xs:documentation>
        The `m-model` element is a 3D model. It can be used to load and display various 3D model file formats, such as OBJ, FBX, or GLTF, depending on the rendering engine being used. The model can be positioned, rotated, and scaled within the 3D scene. It also supports animations.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the 3D model file. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the animation file, if applicable. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-loop" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the animation should loop (true) or play once (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-enabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the animation is enabled (true) or disabled (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-start-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the animation should begin. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-pause-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the animation should pause. If there is no value the animation will not be paused.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-character">
    <xs:annotation>
      <xs:documentation>
        The `m-character` element is a 3D character. It supports containing other `m-model` elements, allowing for composing a character from multiple models.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the 3D character model file. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the character animation file, if applicable. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-loop" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the character animation should loop (true) or play once (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-enabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the character animation is enabled (true) or disabled (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-start-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the character animation should begin. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="anim-pause-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the character animation should pause. If there is no value the animation will not be paused.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-frame">
    <xs:annotation>
      <xs:documentation>
        The `m-frame` element is a 3D frame. It enables composing other MML documents into the document and transforming them as a unit.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the MML document to be embedded within the current document.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="min-x" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The minimum X coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="max-x" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The maximum X coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="min-y" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The minimum Y coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="max-y" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The maximum Y coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="min-z" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The minimum Z coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="max-z" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The maximum Z coordinate of the frame's contents in meters. If not specified, the content is not constrained.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="load-range" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The distance in meters from the observer at which the frame will be loaded. If bounds are specified for the frame then the range is a box expanded by this value from the bounds. If no value is specified, the frame will be loaded regardless of distance.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="unload-range" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The distance beyond the load-range that the frame stay loaded for if currently loaded. This prevents rapid changes between loading and unloading. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-audio">
    <xs:annotation>
      <xs:documentation>
        The `m-audio` element is used to play audio in a 3D scene.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the audio file. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="loop" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the audio should loop (true) or play once (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="loop-duration" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The duration in seconds of the audio loop if `loop` is true. Can be shorter or longer than the audio file duration. Durations longer than the audio file will add silence. If not specified, the entire audio file will loop.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the audio is enabled (true) or disabled (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="volume" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The volume of the audio, ranging from 0 (silent) to 1 (maximum volume). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cone-angle" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The angle in degrees within which sound is at full volume. Default value is 360 (the sound is not directional).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="cone-falloff-angle" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The angle in degrees beyond which sound is inaudible. Must be greater than `cone-angle` to have an effect. Default value is 0 (there is no gradual drop-off).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="start-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the audio should start playing. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="pause-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the audio should pause. If there is no value the audio will not be paused.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-image">
    <xs:annotation>
      <xs:documentation>
        The `m-image` element is used to display an image in a 3D scene.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the image file. Supported formats may vary depending on the rendering engine used.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="width" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The width of the image in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the image in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="opacity" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The opacity of the image, ranging from 0 (completely transparent) to 1 (completely opaque). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-video">
    <xs:annotation>
      <xs:documentation>
        The `m-video` element is used to display a video in a 3D scene.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="collideable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="src" type="URI">
            <xs:annotation>
              <xs:documentation>
                The source URI of the video file. Supported formats may vary depending on the rendering engine used.

                Some engines support streaming video using WHEP (WebRTC video streaming). In this case, the URI should use the protocol "whep://" rather than "https://".
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="width" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The width of the video in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the video in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="loop" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the video should loop (true) or play once (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="enabled" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the video is enabled (true) or disabled (false). Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="volume" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The volume of the video's audio, ranging from 0 (silent) to 1 (maximum volume). Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="start-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the video should start playing. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="pause-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the video should pause. If there is no value the video will not be paused.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-label">
    <xs:annotation>
      <xs:documentation>
        The `m-label` element is used to display text on a plane in a 3D scene.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="colorable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attributeGroup ref="clickable"/>
          <xs:attributeGroup ref="shadows"/>
          <xs:attribute name="content" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The text content to be displayed on the label.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="width" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The width of the label in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="height" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The height of the label in meters. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="font-size" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The font size of the text in centimeters. Default value is 24 centimeters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="font-color" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The color of the text on the label. Accepts color values in formats such as "#FF0000", "red", or "rgb(255,0,0)". If not specified, the default color is "black".
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="padding" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The padding around the text in centimeters. Default value is 8 centimeters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="alignment">
            <xs:annotation>
              <xs:documentation>
                The horizontal alignment of the text. Default value is left.
              </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="left"/>
                <xs:enumeration value="center"/>
                <xs:enumeration value="right"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-position-probe">
    <xs:annotation>
      <xs:documentation>
        The `m-position-probe` element is used to request the position of a user (either camera or avatar depending upon the experience).
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="range" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The range from its position that the position probe requests user positions for in meters. Default value is 10 meters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="interval" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds between user positions being sent to the position probe. Default value is 1000 (1 second).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onpositionenter" type="Script">
            <xs:annotation>
              <xs:appinfo>positionenter|MMLPositionEnterEvent</xs:appinfo>
              <xs:documentation>
                A script expression to be executed when a user enters the range of the position probe. Receives a `PositionEnterEvent`.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onpositionmove" type="Script">
            <xs:annotation>
              <xs:appinfo>positionmove|MMLPositionMoveEvent</xs:appinfo>
              <xs:documentation>
                A script expression to be executed when a user moves within the range of the position probe. Receives a `PositionMoveEvent`.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onpositionleave" type="Script">
            <xs:annotation>
              <xs:appinfo>positionleave|MMLPositionLeaveEvent</xs:appinfo>
              <xs:documentation>
                A script expression to be executed when a user leaves the range of the position probe. Receives a `PositionLeaveEvent`.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-prompt">
    <xs:annotation>
      <xs:documentation>
        The `m-prompt` element is used to request a string from the user when the element is clicked in a 3D scene.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="message" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The message text to be displayed to the user when the prompt is activated.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="placeholder" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The hint text displayed in the input field when the prompt is activated.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="prefill" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The default text pre-populated in the input field when the prompt is activated.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onprompt" type="Script">
            <xs:annotation>
              <xs:appinfo>prompt|MMLPromptEvent</xs:appinfo>
              <xs:documentation>
                A script expression to be executed when a user submits their input.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-link">
    <xs:annotation>
      <xs:documentation>
        The `m-link` element is used to open a web address when the element is clicked in a 3D scene.

        The web address is opened in a new tab or window depending on the client implementation.

        The `m-link` element has no visual representation in the scene; clicking children of element activates the link.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="href" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The web address to open when the link is clicked.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-interaction">
    <xs:annotation>
      <xs:documentation>
        The `m-interaction` element is used to describe an action that a user can take at a point in 3D space.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="range" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                The range that this interaction can be used from in meters. Default value is 5 meters.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="in-focus" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the interaction must be in the direction of the camera to be used. Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="line-of-sight" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether the interaction must be visible to the camera to be used. Default value is false.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="priority" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The priority of this interaction. Lower priority interactions will be shown first. Default value is 1.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="prompt" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The prompt to be displayed when the interaction is presented to the user.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="oninteract" type="Script">
            <xs:annotation>
              <xs:appinfo>interact|MMLInteractionEvent</xs:appinfo>
              <xs:documentation>
                A script expression that is executed when the element is interacted with. Events are also dispatched to "interact" event listeners.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-chat-probe">
    <xs:annotation>
      <xs:documentation>
        The `m-chat-probe` element is used to receive messages from a chat system. Which chat system that is depends on the client implementation.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="debuggable"/>
          <xs:attributeGroup ref="transformable"/>
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="range" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                If the sender of a chat message is within this range (in meters) of the chat probe, the message is expected to be forwarded to the probe. Default value is 1 meter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="onchat" type="Script">
            <xs:annotation>
              <xs:appinfo>chat|MMLChatEvent</xs:appinfo>
              <xs:documentation>
                A script expression that is executed when a chat message is forwarded to the probe. The message itself is contained within the `message` parameter.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-attr-anim">
    <xs:annotation>
      <xs:documentation>
        The `m-attr-anim` element is used to describe document time-synchronized changes to element attributes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="attr" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The attribute of the parent element that this animation will animate.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="start" type="StringOrFloat">
            <xs:annotation>
              <xs:documentation>
                The value of the attribute that the animation should start at.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="end" type="StringOrFloat">
            <xs:annotation>
              <xs:documentation>
                The value of the attribute that the animation should end at.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="start-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the animation should start playing. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="pause-time" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The time in milliseconds since the start of the document lifecycle when the animation should pause. This animation will be considered active if the `pause-time` has passed. If there is no value the animation will not be paused.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="duration" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The duration of the animation in milliseconds. This is the time taken to go from the `start` value to the `end` value (unless `ping-pong` is enabled). Default value is 1000 (1 second).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="loop" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether this animation should loop indefinitely. Default value is true.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="easing">
            <xs:annotation>
              <xs:documentation>
                The name of the easing function to apply to the animation ratio to achieve effects such as smooth animations. If the attribute is not specified or is empty the animation will be linear.
              </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="easeInQuad"/>
                <xs:enumeration value="easeOutQuad"/>
                <xs:enumeration value="easeInOutQuad"/>
                <xs:enumeration value="easeInCubic"/>
                <xs:enumeration value="easeOutCubic"/>
                <xs:enumeration value="easeInOutCubic"/>
                <xs:enumeration value="easeInQuart"/>
                <xs:enumeration value="easeOutQuart"/>
                <xs:enumeration value="easeInOutQuart"/>
                <xs:enumeration value="easeInQuint"/>
                <xs:enumeration value="easeOutQuint"/>
                <xs:enumeration value="easeInOutQuint"/>
                <xs:enumeration value="easeInSine"/>
                <xs:enumeration value="easeOutSine"/>
                <xs:enumeration value="easeInOutSine"/>
                <xs:enumeration value="easeInExpo"/>
                <xs:enumeration value="easeOutExpo"/>
                <xs:enumeration value="easeInOutExpo"/>
                <xs:enumeration value="easeInCirc"/>
                <xs:enumeration value="easeOutCirc"/>
                <xs:enumeration value="easeInOutCirc"/>
                <xs:enumeration value="easeInElastic"/>
                <xs:enumeration value="easeOutElastic"/>
                <xs:enumeration value="easeInOutElastic"/>
                <xs:enumeration value="easeInBack"/>
                <xs:enumeration value="easeOutBack"/>
                <xs:enumeration value="easeInOutBack"/>
                <xs:enumeration value="easeInBounce"/>
                <xs:enumeration value="easeOutBounce"/>
                <xs:enumeration value="easeInOutBounce"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
          <xs:attribute name="ping-pong" type="xs:boolean">
            <xs:annotation>
              <xs:documentation>
                Whether this animation should go from the `start` value to the `end` value, and then return to the `start` value, all within the time specified by the `duration` attribute. Default value is false.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="ping-pong-delay" type="xs:float">
            <xs:annotation>
              <xs:documentation>
                If `ping-pong` is `true` then the `ping-pong-delay` attribute specifies the time in milliseconds that the animation should pause at the `start` and `end` values. This time is part of the overall `duration` (it does not extend the time taken), and as the `ping-pong-delay` is the time held at both `start` and `end`, the total time where the value is held is double the value of `ping-pong-delay`. Default value is 0.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>

  <xs:element name="m-attr-lerp">
    <xs:annotation>
      <xs:documentation>
        The `m-attr-lerp` element is used to describe time-transitioned changes to element attributes.
      </xs:documentation>
    </xs:annotation>
    <xs:complexType mixed="true">
      <xs:complexContent>
        <xs:extension base="MMLContent">
          <xs:attributeGroup ref="coreattrs"/>
          <xs:attribute name="attr" type="xs:string">
            <xs:annotation>
              <xs:documentation>
                The attribute(s) of the parent element that this lerp will animate. Multiple attributes can be specified by separating them with a comma. A value of "all" applies this lerp to all attributes.
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="duration" type="xs:integer">
            <xs:annotation>
              <xs:documentation>
                The duration of the lerp in milliseconds. This is the time taken to go from the previous value of the attribute to the latest value. Default value is 1000 (1 second).
              </xs:documentation>
            </xs:annotation>
          </xs:attribute>
          <xs:attribute name="easing">
            <xs:annotation>
              <xs:documentation>
                The name of the easing function to apply to the lerp ratio to achieve effects such as smooth animations. If the attribute is not specified or is empty the lerp will be linear.
              </xs:documentation>
            </xs:annotation>
            <xs:simpleType>
              <xs:restriction base="xs:token">
                <xs:enumeration value="easeInQuad"/>
                <xs:enumeration value="easeOutQuad"/>
                <xs:enumeration value="easeInOutQuad"/>
                <xs:enumeration value="easeInCubic"/>
                <xs:enumeration value="easeOutCubic"/>
                <xs:enumeration value="easeInOutCubic"/>
                <xs:enumeration value="easeInQuart"/>
                <xs:enumeration value="easeOutQuart"/>
                <xs:enumeration value="easeInOutQuart"/>
                <xs:enumeration value="easeInQuint"/>
                <xs:enumeration value="easeOutQuint"/>
                <xs:enumeration value="easeInOutQuint"/>
                <xs:enumeration value="easeInSine"/>
                <xs:enumeration value="easeOutSine"/>
                <xs:enumeration value="easeInOutSine"/>
                <xs:enumeration value="easeInExpo"/>
                <xs:enumeration value="easeOutExpo"/>
                <xs:enumeration value="easeInOutExpo"/>
                <xs:enumeration value="easeInCirc"/>
                <xs:enumeration value="easeOutCirc"/>
                <xs:enumeration value="easeInOutCirc"/>
                <xs:enumeration value="easeInElastic"/>
                <xs:enumeration value="easeOutElastic"/>
                <xs:enumeration value="easeInOutElastic"/>
                <xs:enumeration value="easeInBack"/>
                <xs:enumeration value="easeOutBack"/>
                <xs:enumeration value="easeInOutBack"/>
                <xs:enumeration value="easeInBounce"/>
                <xs:enumeration value="easeOutBounce"/>
                <xs:enumeration value="easeInOutBounce"/>
              </xs:restriction>
            </xs:simpleType>
          </xs:attribute>
        </xs:extension>
      </xs:complexContent>
    </xs:complexType>
  </xs:element>
</xs:schema>

